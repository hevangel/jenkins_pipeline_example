pipeline {
    agent any
    // triggers { upstream(upstreamProjects: 'jenkins_pipeline_example', threshold: hudson.model.Result.SUCCESS) }
    options {
        timestamps()
        // disableConcurrentBuilds()
        timeout(time: 600, unit: 'SECONDS')
    }
    parameters {
        // Parallel Stage parameters
        booleanParam(name: 'RunParallelStage', defaultValue: false, description: 'Run Parallel Stage')
        string(name: 'SleepDelay', defaultValue: '1', description: 'Sleep delay inside timeout')
        string(name: 'shCmd', defaultValue: 'true', description: 'sh command to run')
        // Matrix Stage parameters
        booleanParam(name: 'RunMatrixStage', defaultValue: false, description: 'Run Matrix Stage')
        // Stash Stage parameters
        booleanParam(name: 'RunStashStage', defaultValue: false, description: 'Run Stash Stage')
        // Lock Stage parameters
        booleanParam(name: 'RunLockStage', defaultValue: false, description: 'Run Lock Stage')
        // Milestone Stage parameters
        booleanParam(name: 'RunMilestoneStage', defaultValue: true, description: 'Run Milestone Stage')
        // Misc
        choice(name: 'choice', choices: ['one','two','three'], description: '')
        password(name: 'password', defaultValue: 'SECRET', description: '')
        text(name: 'text', defaultValue: 'One\nTwo\nThree\n', description: '')
    }
    stages {
       // --------------------------------------------------------------------
       stage("Parallel") {
            when {
                expression {return params.RunParallelStage}
            }
            failFast true
            parallel {
                stage("One") {
                    agent any
                    // run on a new agent
                    steps {
                        echo "${NODE_NAME}"
                        sleep 1
                        echo 'Stage 1'
                    }
                }
                stage("Two") {
                    options {
                        timeout(time: 2, unit: 'SECONDS')
                    }
                    steps {
                        echo "${NODE_NAME}"
                        // Use integer parameter
                        sleep params.SleepDelay.toInteger()
                        echo 'Stage 2'
                    }
                }
                stage("Three") {
                    options {
                        retry(2)
                    }
                    steps {
                        echo 'Stage 3'
                        sh "${params.shCmd}"
                    }
                }
            }
        }
        // --------------------------------------------------------------------
        stage("Matrix") {
            when {
                expression {return params.RunMatrixStage}
            }
            matrix {
                agent {
                    node {
                        label "${PLATFORM}"
                    }
                }
                axes {
                    axis {
                        name 'PLATFORM'
                        // values 'ubuntu20.04', 'ubuntu', 'centos7'
                        values 'oc1', 'oc2', 'master'
                    }
                }
                stages {
                    stage('One') {
                        steps {
                            sleep 1
                            echo "$PLATFORM - stage 1"
                        }
                    }
                }
            }
        }
        // --------------------------------------------------------------------
        stage("StashOne") {
            when {
                expression {return params.RunStashStage}
            }
            steps {
                echo "node $NODE_NAME"
                sh "rm -f *.tmp"
                writeFile file: "a.tmp", text: "${NODE_NAME}"
                sh "ls *.tmp"
                stash includes: "a.tmp", name: 'stash_one'
            }
        }
        stage ("StashTwo") {
            when {
                expression {return params.RunStashStage}
            }
            agent any
            steps {
                echo "node $NODE_NAME"
                sh "rm -f *.tmp"
                unstash 'stash_one'
                sh "ls *.tmp"
                sh "echo 2 >> a.tmp"
                writeFile file: "b.tmp", text: "${NODE_NAME}"
                stash includes: "*.tmp", name: 'stash_two'
            }
        }
        stage("StashThree") {
            when {
                expression {return params.RunStashStage}
            }
            steps {
                echo "node $NODE_NAME"
                sh "rm -f *.tmp"
                unstash 'stash_two'
                sh "ls *.tmp"
                sh "cat a.tmp"
                // overwrite
                unstash 'stash_one'
                sh "cat a.tmp"
            }
        }
        stage("StashFour") {
            when {
                expression {return params.RunStashStage}
            }
            parallel {
                // try stash/unstash in parallel stage
                stage("4a") {
                    agent any
                    steps {
                        sh "echo '4a' > c.tmp"
                        stash includes: "c.tmp", name: 'stash_four'
                    }
                }
                stage("4b") {
                    agent any
                    steps {
                        sh "echo '4b' > d.tmp"
                        stash includes: "d.tmp", name: 'stash_four2'
                    }
                }
            } 
        }
        stage("StashFive") {
            when {
                expression {return params.RunStashStage}
            }
            steps {
                sh "rm -f *.tmp"
                unstash 'stash_four'
                unstash 'stash_four2'
                sh "ls *.tmp"
            }
        }
        // --------------------------------------------------------------------
        stage("LockStage") {
            options {
                lock('deploy')
            }
            when {
                expression {return params.RunLockStage}
            }
            steps {
                echo "inside lock stage"
                sleep 60
            }
        }
        stage("MilestoneStage") {
            when {
                expression {return params.RunMilestoneStage}
            }
            steps {
                echo "Pre milestone"
                sleep params.SleepDelay.toInteger()
                milestone
                echo "Post milestone"
            }
        }
    }
}
