pipeline {
    agent none
    parameters {
        booleanParam(name: 'RunPullStage', defaultValue: false, description: 'Run Pull Stage')
        booleanParam(name: 'RunBuildStage', defaultValue: false, description: 'Run Build Stage')
        booleanParam(name: 'RunPushStage', defaultValue: true, description: 'Run Push Stage')
    }
    stages {
        // Pull image from docker register
        stage("Pull") {
            agent {
                docker {
                    image 'ubuntu:latest'
                    args '-v $HOME/temp:/docker_temp'
                    // use the same node
                    reuseNode true
                }
            }
            when {
                expression {return params.RunPullStage}
                beforeAgent true
            }
            steps {
                sh 'pwd'
                sh 'ls /docker_temp'
                sh 'echo ${BUILD_TAG} > /docker_temp/build_tag.txt'
            }
        }
        // Build image from docker file
        stage("Build") {
            agent { 
                dockerfile {
                    args '-i --entrypoint='
                } 
            }
            when {
                expression {return params.RunBuildStage}
                beforeAgent true
            }
            steps {
                sh 'python3 dummy_test.py'
            }
        }
        // Build image from docker file
        stage("Push") {
            agent any 
            when {
                expression {return params.RunPushStage}
                beforeAgent true
            }
            steps {
                script {
                    String registry = 'https://registry.hub.docker.com'
                    String credential = 'docker' 
                    docker.withRegistry(register, credential) {
                        dockerImage = docker.build "hevangel/jenkins_pipeline_test"
                        dockerImage.push "$BUILD_NUMBER"
                        dockerImage.push "latest"
                    }
                }
            }
        }       
    }
}
